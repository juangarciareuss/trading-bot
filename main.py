# main.py (Versi√≥n Final - Especialista Anti-FOMO / Shorts)

from datetime import datetime, timezone
import time
import os
import sys

import scanner
import operations_manager
import position_evaluator
from utils import enviar_telegram, esperar_proxima_vela

# --- CONFIGURACI√ìN ---
MAX_SHORT_TRADES = 6 # L√≠mite total, ahora solo para shorts
LOCK_FILE = "bot.lock"

# --- L√ìGICA DE BLOQUEO ---
if os.path.exists(LOCK_FILE):
    print("‚ùå ERROR: Ya hay una instancia del bot corriendo.")
    sys.exit()

with open(LOCK_FILE, "w") as f:
    f.write(str(os.getpid()))

print("üöÄ Iniciando Bot Especialista Anti-FOMO (Shorts)...")

try:
    while True:
        try:
            print(f"\nüõ∞Ô∏è  Iniciando ciclo | {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC")
            
            # --- FASE 1: GESTI√ìN DE OPERACIONES EXISTENTES ---
            print("\n--- Fase de Gesti√≥n ---")
            open_trades = operations_manager.load_data("abiertas.json")
            if open_trades:
                actions_to_take = position_evaluator.evaluate_open_positions(open_trades, scanner.exchange)
                if actions_to_take:
                    print(f"üîé Se encontraron {len(actions_to_take)} acciones de gesti√≥n:")
                    for action in actions_to_take:
                        if action['action'] == 'CLOSE':
                            ticker = scanner.exchange.fetch_ticker(action['symbol'])
                            current_price = ticker['last']
                            closed_trade = operations_manager.close_trade_by_id(action['trade_id'], current_price, action['reason'])
                            if closed_trade:
                                 enviar_telegram(f"‚úÖ CIERRE AUTOM√ÅTICO: {action['symbol']} cerrada por {action['reason']}.")
                else:
                    print("  No se requieren acciones de gesti√≥n.")
            else:
                print("  No hay operaciones abiertas para gestionar.")

            # --- FASE 2: B√öSQUEDA DE NUEVAS ALERTAS (Solo Shorts) ---
            print("\n--- Fase de Escaneo de Alertas (Solo Shorts) ---")
            accepted_counts = operations_manager.count_accepted_trades_by_type()
            current_shorts = accepted_counts.get('short', 0)

            print(f"üìä Operaciones Short aceptadas: {current_shorts} de {MAX_SHORT_TRADES}")

            if current_shorts >= MAX_SHORT_TRADES:
                print(f"‚ö†Ô∏è L√≠mite de {MAX_SHORT_TRADES} operaciones short alcanzado. Omitiendo escaneo.")
            else:
                short_signals = scanner.scan_for_shorts()
                if short_signals:
                    alerts = operations_manager.load_data("alertas.json")
                    existing_symbols = [t['symbol'] for t in open_trades] + [a['symbol'] for a in alerts]
                    available_new_signals = [s for s in short_signals if s['symbol'] not in existing_symbols]

                    if available_new_signals:
                        best_signal = sorted(available_new_signals, key=lambda x: x['probabilidad_ia'], reverse=True)[0]
                        print(f"\nüèÜ Nueva ALERTA generada (mejor opci√≥n short): {best_signal['symbol']} con {best_signal['probabilidad_ia']*100:.2f}%")
                        operations_manager.save_new_alert(best_signal)
                    else:
                        print("‚úîÔ∏è Todas las se√±ales encontradas ya tienen una posici√≥n o alerta existente.")
                else:
                    print("‚úÖ No se encontraron se√±ales de venta de alta confianza en este ciclo.")
            
            esperar_proxima_vela(60)
            
        except Exception as e:
            print(f"‚ùå Error en el bucle principal: {e}")
            time.sleep(300)

finally:
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
    print("\nüõë Generador de Alertas detenido.")